[UnnecessaryElif]
markup = 'markdown'
content = '''
Looks like you have an unnecessary Elif condition.
It might be better in this case to just use an Else.

For example, instead of:
```python
if x < 5:
    # do something
elif x >= 5:
    # do something else
```
Consider doing this:
```python
if x < 5:
    # do something
else:
    # do something else
```

Or, instead of:
```python
if current is None:
    current = Node()
elif current is not None:
    current = current.next
```
Consider doing this:
```python
if current is None:
    current = Node()
else:
    current = current.next
```
'''

[IfElseReturnBool]
markup = 'markdown'
content = '''
Looks like you are returning two booleans inside of an If/Else statement.
It might be better if you just return the If condition or its inverse.

For example, instead of:
```python
if x < 5:
    return True
else:
    return False
```
Consider doing this:
```python
return x < 5
```

Or, instead of:
```python
if x % 2 == 0:
    return False
else:
    Return True
```
Consider doing this:
```python
return x % 2 == 1
```
'''

[IfReturnBool]
markup = 'markdown'
content = '''
Looks like you are returning the result of some conditional check with
boolean literals.
It might be better in this case to just return the condition itself.

For example, instead of:
```python
if x < 5:
    return True
return False
```
Consider doing this:
```python
return x < 5
```

Or, instead of:
```python
if x % 2 == 0:
    return False
return True
```
Consider doing:
```python
return x % 2 == 1
'''

[IfElseAssignReturn]
markup = 'markdown'
content = '''
Looks like you are returning one of two or more values based on a condition
after assigning the return result to a variable.
It might be better in this case to just return the values inside the
if-statement blocks.

For example, instead of:

```python
def get_status(code):
    if code == 200:
        result = "OK"
    else:
        result = "ERR"
    return result
```

Consider doing this:

```python
def get_status(code):
    if code == 200:
        return "OK"
    else:
        return "ERR"
```
'''

[IfElseAssignBoolReturn]
markup = 'markdown'
content = '''
Looks like you are returning the result of some conditional check by assigning a
boolean return value to a variable.
It might be better in this case to just return the condition itself.

For example, instead of:
```python
def is_small(x):
    if x < 5:
        value_is_small = True
    else:
        value_is_small = False
    return value_is_small
```

Consider doing this:

```python
def is_small(x):
    return x < 5
```

Or, instead of:

```python
def is_valid(value):
    if value is None:
        valid = False
    else:
        valid = True
    return valid
```

Consider doing this:

```python
def is_valid(value):
    return value is not None
```
'''

[IfElseAssignBool]
markup = 'markdown'
content = '''
It looks like you are trying to assign the result of a condition to a variable
in an if/else.
In this case, it might just be best to assign the result of the condition or
its inverse to the variable directly.

For example, instead of:

```python
if x > 10:
    is_big = True
else:
    is_big = False
```

Consider doing this:

```python
is_big = x > 10
```

Or, instead of:

```python
if len(my_list) > 0:
    is_empty = False
else:
    is_empty = True
```

Consider doing this:

```python
is_empty = len(my_list) == 0
```
'''

[EmptyIfBody]
markup = 'markdown'
content = '''
Looks like the body of this if statement isn't doing anything.
Consider removing it.

For example, instead of:

```python
if x > 0:
    x = x
else:
    x = 0
```

Consider doing this:

```python
if x < 0:
    x = 0
```

Or, instead of:

```python
if x > 10:
    pass
else:
    x = 10
```

Consider doing this:

```python
if x <= 10:
    x = 10
```
'''

[EmptyElseBody]
markup = 'markdown'
content = '''
Looks like the body of this else statement isn't doing anything.
Consider removing it.

For example, instead of:

```python
if x < 0:
    x = 0
else:
    x = x
```

Consider doing this:

```python
if x < 0:
    x = 0
```

Or, instead of:

```python
if x <= 10:
    x = 10
else:
    pass
```

Consider doing this:

```python
if x <= 10:
    x = 10
```
'''

[NestedIf]
markup = 'markdown'
content = ''''''  # ToDo - Add Description

[ConfusingElse]
markup = 'markdown'
content = ''''''  # ToDo - Add Description

[UnnecessaryElse]
markup = 'markdown'
content = ''''''  # ToDo - Add Description

[DuplicateIfElseStatement]
markup = 'markdown'
content = ''''''  # ToDo - Add Description

[SeveralDuplicateIfElseStatements]
markup = 'markdown'
content = ''''''  # ToDo - Add Description

[DuplicateIfElseBody]
markup = 'markdown'
content = ''''''  # ToDo - Add Description

[AugmentableAssignment]
markup = 'markdown'
content = ''''''  # ToDo - Add Description

[DuplicateExpression]
markup = 'markdown'
content = ''''''  # ToDo - Add Description

[MissedAbsoluteValue]
markup = 'markdown'
content = ''''''  # ToDo - Add Description

[RepeatedAddition]
markup = 'markdown'
content = ''''''  # ToDo - Add Description

[RepeatedMultiplication]
markup = 'markdown'
content = ''''''  # ToDo - Add Description

[RedundantArithmetic]
markup = 'markdown'
content = ''''''  # ToDo - Add Description

[RedundantNot]
markup = 'markdown'
content = ''''''  # ToDo - Add Description

[ElseIf]
markup = 'markdown'
content = ''''''  # ToDo - Add Description

[RedundantIndexedFor]
markup = 'markdown'
content = ''''''  # ToDo - Add Description

[RedundantComparison]
markup = 'markdown'
content = ''''''  # ToDo - Add Description

[MergeableEqual]
markup = 'markdown'
content = ''''''  # ToDo - Add Description
